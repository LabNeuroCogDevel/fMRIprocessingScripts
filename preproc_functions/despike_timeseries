#!/bin/bash

function despike_timeseries {

    #Voxelwise despiking: optional step
    #Can use 3dDespike (time despiking) or wavelet despiking
    #Especially useful if data will be bandpass filtered
    if [ $despike -eq 1 ]; then
	preDespike="${postSS}" #despiking input is thresholded + skull-stripped functional from prior step
	prefix="d${prefix}" #add d to file prefix to denote despiking
	postDespike="${prefix}${funcFile}"

	if [ -f ".despike_complete" ]; then
	    return 0
	fi

	if [ $waveletDespike -eq 1 ]; then

	    if [ $waveletM1000 -eq 1 ]; then
		#Per discussion with Ameera Patel, wavelet despiking does best with voxelwise normalization to 1000 at the default spike threshold of 10.
		#Also, having large variability in intensities across the brain can be difficult for the algorithm because the spike threshold should vary
		#according to the intrinsic intensity of the time series. Hence, with our 32-channel data that have major bias fields (due to coil geometry)
		#perform a voxelwise normalization to 1000 prior to despiking, then undo after despiking

		#Only normalize brain voxels to avoid dramatic inflation of spike percentage due to rescaling of air voxels (~0 intensity)
		rel "Voxelwise normalization to 1000 prior to wavelet despiking so that spike threshold of 10 is appropriate." c
		rel "fslmaths \"${preDespike}\" -Tmean predespike_tmean_float -odt float"
		rel "fslmaths \"${preDespike}\" -mul 1000 -div predespike_tmean_float -mas $threshMask predespike -odt float" #brain mask

		#use transformed image for despiking
		preDespike="predespike_m1000"
	    else
		#rel "fslmaths \"${preDespike}\" predespike -odt float" #just copy image
		rel "ln -sfn \"${preDespike}${ext}\" predespike${ext}" #symbolic link to image to despike
	    fi

	    if [ $( uname ) = Darwin ]; then
		matlabCmd="addpath(genpath('${scriptDir}/wavelet_despike/mac'));"
	    else
		matlabCmd="addpath(genpath('${scriptDir}/wavelet_despike/linux_windows'));"
	    fi
# 	    matlabCmd="${matlabCmd} try; 
# WaveletDespike('predespike${ext}', 
# 'postdespike',
# 'LimitRAM', ${MATLAB_RAM_limit},
# 'threshold', ${waveletThreshold}); 
# end; quit;
# "
	    #cmd with spaces is breaking ACI at the moment (due to unquoted use of $@)
	    matlabCmd="${matlabCmd}try;WaveletDespike('predespike${ext}','postdespike','LimitRAM',${MATLAB_RAM_limit},'threshold',${waveletThreshold});end;quit;"

	    if command -v module >/dev/null && uname -a | grep -q aci.ics.psu.edu ; then
		#make sure MATLAB is loaded as a module
		if ! echo $LOADEDMODULES | grep -q "matlab/R2017b"; then module load "matlab/R2017b" >/dev/null 2>&1; fi
	    fi
	    
	    #need to unset display on Linux (at least wallace) to avoid matlab exiting on subsequent runs of the script
	    OLDDISPLAY="${DISPLAY}"
	    unset DISPLAY
	    rel "matlab -nodisplay ${MATLAB_single_thread} -r \"$matlabCmd\""
	    export DISPLAY="${OLDDISPLAY}"

	    #note: wavelet despike function sometimes changes the image orientation (e.g., from RPI to LPI), which yields errors
	    #downstream when files before and after despiking are used

	    #thus, for safety, use 3dresample to fix the grid/orientation for outputs before proceeding. This should not have any
	    #negative consequences such as L/R flip, but is instead just a matrix orientation issue.

	    #somehow 3dresample doesn't quite get this right either (tweaks sform/qform)... forcing wavelet to use the load_untouch_nii approach.
	    #rel "3dresample -overwrite -inset postdespike_wds.nii.gz -prefix postdespike_wds.nii.gz -master predespike${ext}"
	    #rel "3dresample -overwrite -inset postdespike_noise.nii.gz -prefix postdespike_noise.nii.gz -master predespike${ext}"
	    
	    if [ $waveletM1000 -eq 1 ]; then
		#undo mean 1000 normalization
		rel "fslmaths postdespike_wds -div 1000 -mul predespike_tmean_float -mas $threshMask ${postDespike}"
		rel "fslmaths postdespike_noise -div 1000 -mul predespike_tmean_float -mas $threshMask ${postDespike}_wavelet_noise"

		rel "imrm predespike_tmean_float predespike postdespike_wds postdespike_noise"
	    else
		rel "mv postdespike_wds.nii.gz \"${postDespike}.nii.gz\"" #move despiked file to d_funcfile
		rel "mv postdespike_noise.nii.gz \"${postDespike}_wavelet_noise.nii.gz\""
	    fi

	    rel "mv postdespike_SP.txt \"${postDespike}_spike_percentage.txt\""
	else
	    #time despike
	    rel "3dDespike -overwrite -NEW -cut $despikeThresh -prefix \"${postDespike}${ext}\" \"${preDespike}${ext}\""
	fi
	rel "date > .despike_complete"

    fi

}
