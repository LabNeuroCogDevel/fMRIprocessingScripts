#!/bin/bash

# globals used by this function
DESPIKE_TIMESERIES_GLOBALS=(funcFile prefix ext despike postSS waveletDespike waveletM1000 waveletThreshold threshMask MATLAB_RAM_limit despikeThresh scriptDir)

function despike_timeseries {

    #Voxelwise despiking: optional step
    #Can use 3dDespike (time despiking) or wavelet despiking
    #Especially useful if data will be bandpass filtered
    if [ $despike -eq 1 ]; then
	preDespike="${postSS}" #despiking input is thresholded + skull-stripped functional from prior step
	prefix="d${prefix}" #add d to file prefix to denote despiking
	postDespike="${prefix}${funcFile}"

	if [ -f ".despike_complete" ]; then
	    return 0
	fi

       # print globals (and do nothing if that fails)
       print_vars_in DESPIKE_TIMESERIES_GLOBALS || :

	if [ $waveletDespike -eq 1 ]; then

	    if [ $waveletM1000 -eq 1 ]; then
		#Per discussion with Ameera Patel, wavelet despiking does best with voxelwise normalization to 1000 at the default spike threshold of 10.
		#Also, having large variability in intensities across the brain can be difficult for the algorithm because the spike threshold should vary
		#according to the intrinsic intensity of the time series. Hence, with our 32-channel data that have major bias fields (due to coil geometry)
		#perform a voxelwise normalization to 1000 prior to despiking, then undo after despiking

		#Only normalize brain voxels to avoid dramatic inflation of spike percentage due to rescaling of air voxels (~0 intensity)
		rel "Voxelwise normalization to 1000 prior to wavelet despiking so that spike threshold of 10 is appropriate." c
		rel "fslmaths \"${preDespike}\" -Tmean predespike_tmean_float -odt float"
		rel "fslmaths \"${preDespike}\" -mul 1000 -div predespike_tmean_float -mas $threshMask predespike -odt float" #brain mask

		#use transformed image for despiking
		preDespike="predespike_m1000"
	    else
		#rel "fslmaths \"${preDespike}\" predespike -odt float" #just copy image
		rel "ln -sfn \"${preDespike}${ext}\" predespike${ext}" #symbolic link to image to despike
              # octave will remove sym link file
	    fi

	    if [ $( uname ) = Darwin ]; then
		matlabCmd="addpath(genpath('${scriptDir}/wavelet_despike/mac'));"
	    else
		matlabCmd="addpath(genpath('${scriptDir}/wavelet_despike/linux_windows'));"
	    fi

           ## MATLAB or ocatve? (WF20181026 - want octave for docker)
           # default to matlab
	    local matlabBin="matlab -nodisplay ${MATLAB_single_thread} -r "
           local predespike_nii=predespike${ext}
           # unless we dont have matlab or have USE_OCTAVE="yes"
           if ! command -v matlab >/dev/null || [ "x$USE_OCTAVE" == "xyes" ]; then
              ! command -v octave >/dev/null && rel "cannot use WaveletDespike: do not have matlab or octave in PATH ($PATH)!" c && exit 1
              matlabBin="octave --no-gui --eval "
              matlabCmd="${matlabCmd}\nfunction v=version(),v='7.11'; end;" # fake matlab version (gunzip in nifti toolbox calls)
              matlabCmd="${matlabCmd}\nfunction cprintf(varargin),if(nargin>1),varargin=varargin(2:end);end;printf(varargin{:}),end;" # fake colorprint, b/c no 'handle'
              matlabCmd="${matlabCmd}\nwarning('off','Octave:possible-matlab-short-circuit-operator');" # dont care about matlab | &
              matlabCmd="${matlabCmd}\nconfirm_recursive_rmdir(0);" # no prompt rm-ing temp dir w/ uncompressed .nii

              # mex files might be for matlab. we can rerun setup to get octave versions
              rel "N.B. if octave fails to run, consider rebuilding mex files:\n\toctave --eval 'cd ${scriptDir}/wavelet_despike/linux_windows; setup' " c 
           fi

	    #cmd with spaces is breaking ACI at the moment (due to unquoted use of $@)
	    matlabCmd="${matlabCmd}WaveletDespike('$predespike_nii','postdespike','LimitRAM',${MATLAB_RAM_limit},'threshold',${waveletThreshold});"

           local mlscript=wavlet_despike_${matlabBin/ */}.m # wavlet_despike_matlab.m
           echo -e "$matlabCmd" > $mlscript
	    #need to unset display on Linux (at least wallace) to avoid matlab exiting on subsequent runs of the script
	    OLDDISPLAY="${DISPLAY}"
	    unset DISPLAY
           rel "$matlabBin \"try;run('$mlscript');end;quit\""
	    export DISPLAY="${OLDDISPLAY}"

           # octaves interpetation of load_nii eats the symbolic link file -- not with rel b/c we already recorded it
           [ ! -r predespike${ext} ] && ln -sfn "${preDespike}${ext}" predespike${ext}

	    #note: wavelet despike function sometimes changes the image orientation (e.g., from RPI to LPI), which yields errors
	    #downstream when files before and after despiking are used

	    #thus, for safety, use 3dresample to fix the grid/orientation for outputs before proceeding. This should not have any
	    #negative consequences such as L/R flip, but is instead just a matrix orientation issue.

	    #somehow 3dresample doesn't quite get this right either (tweaks sform/qform)... forcing wavelet to use the load_untouch_nii approach.
	    #rel "3dresample -overwrite -inset postdespike_wds.nii.gz -prefix postdespike_wds.nii.gz -master predespike${ext}"
	    #rel "3dresample -overwrite -inset postdespike_noise.nii.gz -prefix postdespike_noise.nii.gz -master predespike${ext}"
	    
	    if [ $waveletM1000 -eq 1 ]; then
		#undo mean 1000 normalization
		rel "fslmaths postdespike_wds -div 1000 -mul predespike_tmean_float -mas $threshMask ${postDespike}"
		rel "fslmaths postdespike_noise -div 1000 -mul predespike_tmean_float -mas $threshMask ${postDespike}_wavelet_noise"

		rel "imrm predespike_tmean_float predespike postdespike_wds postdespike_noise"
	    else
		rel "mv postdespike_wds.nii.gz \"${postDespike}.nii.gz\"" #move despiked file to d_funcfile
		rel "mv postdespike_noise.nii.gz \"${postDespike}_wavelet_noise.nii.gz\""
	    fi

	    rel "mv postdespike_SP.txt \"${postDespike}_spike_percentage.txt\""
	else
	    #time despike
	    rel "3dDespike -overwrite -NEW -cut $despikeThresh -prefix \"${postDespike}${ext}\" \"${preDespike}${ext}\""
	fi
	rel "date > .despike_complete"

    fi

}
# vim: set tabstop=7:
