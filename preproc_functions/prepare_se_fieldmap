#!/usr/bin/env bash

for needfunc in convert_or_use_nii; do
   [ "$(type -t $needfunc)" == "function" ] && continue
   filetosource="$(dirname ${BASH_SOURCE[0]})/$needfunc"
   [ ! -r "$filetosource" ] && echo "$BASH_SORUCE: need function $needfunc, not in '$filetosource'; not running" >&2 && return 1
   source "$filetosource"
done

#this function is responsible for running TOPUP on the phase+ and phase- images
#then exporting the rad/s TopupField to the unwarp directory for preprocessing using the typical steps (preproc_fieldmap)
prepare_se_fieldmap() {
    if [ -z "$dwelltime" -o -z "$unwarpdir" ]; then
      rel "Error: Cannot prepare spin echo distorion correction! Missing dwelltime '$dwelltime' and/or unwarpdir '$unwarpdir'. Do you need to include/edit fm_cfg '$fm_cfg' "  c
      return 1
    fi 

    #TODO/FIX: will use se_phase* if it exsits regardless of what input ($se_phaspos) is given
    convert_or_use_nii se_phasepos "$se_phasepos"
    [ $(imtest se_phasepos ) -eq 1 ] && se_phasepos=se_phasepos

    convert_or_use_nii se_phaseneg "$se_phaseneg"
    [ $(imtest se_phaseneg ) -eq 1 ] && se_phaseneg=se_phaseneg

    #topup works from data before skull-stripping
    #determine which is the target for distortion correction
    if [ -n "$funcRefimg" ]; then
	local target="epiref"
    else
	local target="mc_target"
    fi
    
    #Should now be in a position to call topup script. This will concatenate phase+ and phase- images, then perform distortion correction
    #Note that topup internally runs motion coregistration to the first volume in the series. Thus, the warp outputs are aligned to this volume
    #  and need to be realigned to relevant images in the pipeline (e.g., epiref or struct) to be useful.
    #The outputs include:
    # 1) SE_TopupField: the distortion field in rad/s, suitable for input to fugue and other standard fieldmap steps (--fout)
    # 2) SE_WarpField: warp coefficients for each volume in BothPhases usable with applywarp. Note that this is a scalar/constant transform from TopupField (--dfout)
    # 2) BothPhases: concatenated SE images (negative, then positive)
    # 3) PhasePos: phase-positive SE image
    # 4) PhaseNeg: phase-negative SE image
    # 5) Coefficients: distortion coeffients useful with applytopup (--out)
    # 6) SE_Magnitudes: concatenated distortion corrected SE images
    # 7) SE_Magnitude: temporal mean of Magnitudes, useful for coregistration to other targets (e.g., epiref or struct)
    
    rel "Running TOPUP on SE phase+ and phase- images to estimate and correct distortion. See topuplog.txt for details" c
    rel "${scriptDir}/preproc_functions/TopupPreprocessingAll -workingdir topup_undistort -phaseneg $se_phaseneg -phasepos $se_phasepos \
		-epiref ${target} -epiref_pedir ${unwarpdir} -echospacing ${dwelltime} -usejacobian false"

    qa_image topup_undistort/SE_Magnitude topup_undistort/SE_UD_epiref epiref_to_sefmap.png "SE Magnitude overlaid with undistorted coregistered epiref"
    qa_image topup_undistort/ER_UD_epiref topup_undistort/epiref epiref_undistort.png "Undistorted epiref (TOPUP direct warp) overlaid with distorted epiref"
    
    #Saves a file called ER_WarpField in topup_undistort that is aligned to the epiref
    #Use this to undistort the files used in functional -> structural coregistration
    
    rel "Copying fieldmap ingredients to FSL namespace images" c
    [ ! -d "unwarp" ] && mkdir unwarp
    cd unwarp

    rel "fslmaths ../topup_undistort/SE_Magnitude       FM_UD_fmap_mag"
    rel "fslmaths ../topup_undistort/SE_TopupField      FM_UD_fmap"
        
    #explicit return code needed to avoid implicit status of prior command
    return 0
    
}

# use convert_or_use_nii from it's own file
## give the name and either a nifti or a dicom directory
#convert_or_use_nii() {
#   local name="$1"; shift
#   local input="$1"
#   local inputdir=$(dirname "$input")
#   #convert SE images to NIfTI if needed
#   #determine if the image already exists
#
#   # maybe we've already converted. if we have, set the input to name 
#   # and well return out of this on the next line
#   # [ $( imtest $name ) -eq 1 ] && input=$name
#
#   # if we have the input, we're all set. dont need to do anything
#   # N.B. imtest fails on symlinks!?
#   [ $( imtest $input ) -eq 1 ] && return 0
#
#   # if no files match the input string, that's an error
#   if [ $( ls $input | wc -l ) -eq 0 ]; then
#      rel "Could not find any images matching $name specification ('$input')." c && exit 1
#   fi
#
#   # make sure we are looking at a dicom
#   first_dicom=$( ls $input | head -n 1 )
#   dicom_hdr "$first_dicom" 2>&1 | grep -q "ERROR: can't open.*as a DICOM file" && isdicom=0 || isdicom=1 # 0 exit status from grep indicates a match
#   if [ $isdicom -eq 0 ]; then
#      rel "Cannot recognize $first_dicom (from '$input') as DICOM or NIfTI" c
#      exit 1
#   fi
#
#   rel "Converting $name to NIfTI" c
#
#   # lock here so we dont run dicom2nii twice while parallel processing multiple protocols that share this FM
#   local lockfile="${inputdir}/.${name}_inprogress"
#   waitforlock $lockfile
#   makelockfile $lockfile
#
#   # TODO: allow reuse 
#   # save nifti in the dicom directory?
#
#   # convert dicoms to nifti called $name in working directory (functional preprocess directory)
#   if [ $have_dcm2niix -eq 1 ]; then
#      [ -r $name.nii.gz ] && rm -f $name.nii.gz
#      dcm2niix -z y -f $name -o ./ $inputdir
#   else
#      rel "Using Dimon to convert $name to NIfTI. Warning: this may result in inconsistent unwarping behavior due to bad image headers. Prefer dcm2niix!" c
#      dimon "${input}" "$name"
#   fi
#   rmlockfile $lockfile
#}

# vim: set tabstop=7:
