#!/bin/bash
set -e

[ -z $ext ] && ext=.nii.gz #will be set upstream after incorporating in pipeline

#SE prefix denotes that image is in spin-echo (i.e., fieldmap) space
#ER prefix denotes epiref space

#ANTS is quite good at coregistration (better than flirt in many cases) and will be increasingly preferred in the pipeline
#c3d provides a tool for transforming an ANTS matrix (itk) to FSL-compatible.mat
command -v antsRegistrationSyN.sh >/dev/null 2>&1 && have_ants=1 || have_ants=0
command -v c3d_affine_tool >/dev/null 2>&1 && have_c3d=1 || have_c3d=0

[ ! -d "transforms" ] && mkdir "transforms"

#shameless adaptation of HCP script: https://github.com/Washington-University/Pipelines
scriptDir=$( dirname "$0" )
source "${scriptDir}/helper_functions" #for rel
logFile="topuplog.txt"

if [ -r .topup_complete ]; then
    echo "Topup preprocessing already complete"
    exit 0
fi

[ -r "topuplog.txt" ] && rm -rf topuplog.txt #clear any existing log before proceeding

# Requirements for this script
#  installed versions of: FSL (version 5.0.6+), HCP-gradunwarp (version 1.0.3)

Usage() {
  echo "`basename $0`: Script for using topup to do distortion correction for EPI (scout)"
  echo " "
  echo "Usage: `basename $0` [-workingdir <working directory>]"
  echo "            -phaseneg <NIfTI containing negative phase encode spin-echo EPI images: PE direction L>>R or A>>P>"
  echo "            -phasepos <NIfTI containing positive phase encode spin-echo EPI images: PE direction R>>L or P>>A>"
  echo "            -epiref <single-band scout EPI image to undistort. Should already be corrected for gradient non-linear distortions>"
  echo "            -epiref_pedir <phase encode direction of epiref image: x/y/z/-x/-y/-z>"
  echo "            -echospacing <effective echo spacing of EPI in seconds. See SIEMENS Sequence > Echo spacing. Beward partial Fourier and iPAT/GRAPPA.>"
  echo "            -grad_unwarp <gradient non-linearity distortion coefficients (Siemens format)>"
  echo "            [-topupconfig <topup config file>] Defaults to b02b0.cnf from FSL."
  echo "            -usejacobian <\"true\" or \"false\">"
  echo "            [-owarp <output warpfield image: scout to distortion corrected SE EPI>]"
  echo "            [-ofmapmag <output 'Magnitude' image: scout to distortion corrected SE EPI>]" 
  echo "            [-ofmapmagbrain <output 'Magnitude' brain image: scout to distortion corrected SE EPI>]"   
  echo "            [-ofmap <output scaled topup field map image>]"
  echo "            [-ojacobian <output Jacobian image>]"
  echo " "
  echo "   Note: the input SE EPI images should not be distortion corrected (for gradient non-linearities)"
}

################################################### OUTPUT FILES #####################################################

# Output images (in $WD): 
#          BothPhases      (input to topup - combines both pe direction data, plus masking)
#          epiref_to_PhaseNeg_gdc.mat epiref_to_PhaseNeg_gdc   (linear registration result)
#          PhaseNeg_gdc  PhasePos_gdc
#          PhaseNeg_gdc_dc  PhaseNeg_gdc_dc_jac  PhasePos_gdc_dc  PhasePos_gdc_dc_jac
#          SE_UD_epiref (undistorted epiref in SE space)       SE_UD_epiref_jac (with Jacobian intensity correction)
#          ER_UD_epiref (undistorted epiref in epiref space)   ER_UD_epiref_jac (with Jacobian intensity correction)
#          SE_WarpField SE_Jacobian (in spin-echo space)
#          ER_WarpField ER_Jacobian (in epiref space)
# Output images (not in $WD): 
#          ${DistortionCorrectionWarpFieldOutput}  ${JacobianOutput}

################################################## OPTION PARSING #####################################################

# Just give usage if no arguments specified
if [ $# -eq 0 ] ; then Usage; exit 0; fi
# check for correct options
if [ $# -lt 7 ] ; then Usage; exit 1; fi

#defaults
WD=topup_undistort
TopupConfig=${FSLDIR}/etc/flirtsch/b02b0.cnf #default
UseJacobian=false
GradientDistortionCoeffs=
EpirefUnwarpDirection=

#process command line inputs
while [ _$1 != _ ] ; do
    if [[ $1 = -workingdir ]] ; then
	WD="${2}"
	shift 2
    elif [ $1 = -phaseneg ]; then
	PhaseEncodeNeg="${2}"
	shift 2
    elif [ $1 = -phasepos ]; then
	PhaseEncodePos="${2}"
	shift 2
    elif [ $1 = -epiref ]; then
	EpirefInputName="${2}"
	shift 2
    elif [ $1 = -echospacing ]; then
	DwellTime="${2}"
	shift 2
    elif [ $1 = -epiref_pedir ]; then
	EpirefUnwarpDirection="${2}"
	shift 2
    elif [ $1 = -owarp ]; then
	DistortionCorrectionWarpFieldOutput="${2}"
	shift 2
    elif [ $1 = -ofmapmag ]; then
	DistortionCorrectionMagnitudeOutput="${2}"
	shift 2
    elif [ $1 = -ofmapmagbrain ]; then
	DistortionCorrectionMagnitudeBrainOutput="${2}"
	shift 2
    elif [ $1 = -ofmap ]; then
	DistortionCorrectionFieldOutput="${2}"
	shift 2
    elif [ $1 = -ojacobian ]; then
	JacobianOutput="${2}"
	shift 2
    elif [ $1 = -grad_unwarp ]; then
	GradientDistortionCoeffs="${2}"
	shift 2
    elif [ $1 = -topupconfig ]; then
	TopupConfig="${2}"
	shift 2
    elif [ $1 = -usejacobian ]; then
	UseJacobian="${2}"
	shift 2
    else 
	Usage
	echo -e "----------------\n\n"
	echo "Unrecognized command line parameter: ${1}"
	exit 1
    fi
done

if [ -z "$EpirefUnwarpDirection" ]; then
    echo "-epiref_pedir (phase encoding direction of EPI image) is a required argument."
    exit 1
fi

#sanity check the jacobian option
if [[ "$UseJacobian" != "true" && "$UseJacobian" != "false" ]]
then
    rel "the -usejacobian option must be 'true' or 'false'" c
    exit 1
fi

rel "START: Topup Field Map Generation and Gradient Unwarping" c

mkdir -p $WD

# Record the input options in a log file
rel "$0 $@" c
rel "PWD = $PWD" c
rel "date: $(date)" c

########################################## DO WORK ########################################## 

#check dimensions of phase versus sbref images
#should we also check spacing info? could be off by tiny fractions, so probably not
if [[ $( fslhd $PhaseEncodeNeg | grep '^dim[123]' ) != $( fslhd $EpirefInputName | grep '^dim[123]' ) ]]; then
    rel "Error: Spin echo fieldmap has different dimensions than scout image. This requires a manual fix." c
    exit 1
fi

#check that spin echo fieldmap dimensions match
if [[ $( fslhd $PhaseEncodeNeg | grep '^dim[123]' ) != $( fslhd $PhaseEncodePos | grep '^dim[123]' ) ]]; then
    rel "Error: Spin echo fieldmap images have different dimensions!" c
    exit 1
fi

# PhaseNeg and PhasePos are sets of SE EPI images with opposite phase encodes
# Copy these into directory for further processing
rel "imcp $PhaseEncodeNeg ${WD}/PhaseNeg"
rel "imcp $PhaseEncodePos ${WD}/PhasePos"
rel "imcp $EpirefInputName ${WD}/epiref"

#this should probably be done upstream to get registration matrices correct
#rel "fslreorient2std ${WD}/PhaseNeg ${WD}/PhaseNeg"
#rel "fslreorient2std ${WD}/PhasePos ${WD}/PhasePos"
#rel "fslreorient2std ${WD}/epiref ${WD}/epiref"

function gradunwarp() {
    d=$( dirname "$img" )
    img=$( remove_ext "${1}" )
    baseimg=$( basename $img )

    #check that command exists
    command -v gradient_unwarp.py >/dev/null 2>&1 || { echo "Cannot find gradient_unwarp.py. Aborting." >&2; exit 1; }

    cwd="$PWD"
    cd "$d"

    echo "Currently in $PWD"
    #pull off first volume because gradient undistortion applies equally to each (correction wrt scanner coordinates)
    #v1="$WD/${img}_vol1"
    v1="${baseimg}_vol1"
    rel "fslroi \"${img}\" \"$v1\" 0 1"

    rel "gradient_unwarp.py \"${v1}${ext}\" \"${v1}_gdc_orig${ext}\" siemens -g \"$GradientDistortionCoeffs\" -n"

    # Now create an appropriate warpfield output (relative convention) and apply it to all timepoints
    #convertwarp's jacobian output has 8 frames, each combination of one-sided differences, so average them
    rel "convertwarp --abs --ref=\"${v1}\" --warp1=fullWarp_abs --relout --out=${img}_gdc_warpfield --jacobian=${img}_gdc_jacobian"
    rel "fslmaths ${img}_gdc_jacobian -Tmean ${img}_gdc_jacobian"
    rel "applywarp --rel --interp=spline -i \"${img}\" -r \"${img}\" -w \"${img}_gdc_warpfield\" -o \"${img}_gdc\""

    rel "imrm ${v1} ${v1}_gdc_orig fullWarp_abs"
    cd "$cwd"
}

# Step 1: Apply gradient non-linearity distortion correction to input images (SE pair)
if [ ! $GradientDistortionCoeffs = "NONE" ] ; then

    gradunwarp ${WD}/PhaseNeg
    gradunwarp ${WD}/PhasePos

  # ${GlobalScripts}/GradientDistortionUnwarp.sh \
  #     --workingdir=${WD} \
  #     --coeffs=${GradientDistortionCoeffs} \
  #     --in=${WD}/PhaseNeg \
  #     --out=${WD}/PhaseNeg_gdc \
  #     --owarp=${WD}/PhaseNeg_gdc_warp

  # ${GlobalScripts}/GradientDistortionUnwarp.sh \
  #     --workingdir=${WD} \
  #     --coeffs=${GradientDistortionCoeffs} \
  #     --in=${WD}/PhasePos \
  #     --out=${WD}/PhasePos_gdc \
  #     --owarp=${WD}/PhasePos_gdc_warp

    #Apply jacobian intensity correction from gradient undistortion
    if [[ $UseJacobian == "true" ]]; then
	rel "Applying Jacobian intensity correction from gradient undistortion." c
	rel "fslmaths ${WD}/PhaseNeg_gdc -mul ${WD}/PhaseNeg_gdc_jacobian ${WD}/PhaseNeg_gdc"
	rel "fslmaths ${WD}/PhasePos_gdc -mul ${WD}/PhasePos_gdc_jacobian ${WD}/PhasePos_gdc"
    fi

    #in the below stuff, the jacobians for both phases and sbref are applied unconditionally to a separate _jac image
    #NOTE: "SBref" is actually the input scout, which is actually the _gdc scout, with gdc jacobian applied if applicable

    # Make a dilated mask in the distortion corrected space
    rel "fslmaths ${WD}/PhaseNeg -abs -bin -dilD ${WD}/PhaseNeg_mask"
    rel "applywarp --rel --interp=nn -i ${WD}/PhaseNeg_mask -r ${WD}/PhaseNeg_mask -w ${WD}/PhaseNeg_gdc_warpfield -o ${WD}/PhaseNeg_mask_gdc"
    rel "fslmaths ${WD}/PhasePos -abs -bin -dilD ${WD}/PhasePos_mask"
    rel "applywarp --rel --interp=nn -i ${WD}/PhasePos_mask -r ${WD}/PhasePos_mask -w ${WD}/PhasePos_gdc_warpfield -o ${WD}/PhasePos_mask_gdc"
    
    # Make a conservative (eroded) intersection of the two masks
    rel "fslmaths ${WD}/PhaseNeg_mask_gdc -mas ${WD}/PhasePos_mask_gdc -ero -bin ${WD}/Mask"
    # Merge both sets of images
    rel "fslmerge -t ${WD}/BothPhases ${WD}/PhaseNeg_gdc ${WD}/PhasePos_gdc"
else
    #No gradient undistortion. Just concatenate images
    rel "imcp ${WD}/PhaseNeg ${WD}/PhaseNeg_gdc"
    rel "imcp ${WD}/PhasePos ${WD}/PhasePos_gdc"
    rel "fslmerge -t ${WD}/BothPhases ${WD}/PhaseNeg_gdc ${WD}/PhasePos_gdc"
    rel "fslmaths ${WD}/PhaseNeg_gdc -mul 0 -add 1 ${WD}/Mask"
fi



# Step 2: Set up text files with all necessary parameters for topup
txtfname=${WD}/acqparams.txt
if [ -e $txtfname ] ; then
    rm $txtfname #remove old acqparams.txt file
fi

dimtNeg=$( fslval ${WD}/PhaseNeg dim4 )
dimtPos=$( fslval ${WD}/PhasePos dim4 )

# Calculate the readout time and populate the parameter file appropriately
if [[ $EpirefUnwarpDirection = "x" || $EpirefUnwarpDirection = "x-" || $EpirefUnwarpDirection = "-x" ]] ; then
    # X direction phase encode
    dimx=$( fslval ${WD}/PhaseNeg dim1 )
    nPEsteps=$(($dimx - 1))
    #Total_readout=Echo_spacing*(#of_PE_steps-1)
    #Note: the above calculation implies full k-space acquisition for SE EPI.
    #In case of partial Fourier/k-space acquisition (though not recommended), $dimx-1 does not equal to nPEsteps.
    
    ro_time=$( echo "scale=6; ${DwellTime} * ${nPEsteps}" | bc -l ) #Compute Total_readout in secs with up to 6 decimal places
    rel "Total calculated readout time is $ro_time secs. Does this match your expectation?" c

    #add a line for each negative phase image in X dimension (PhaseNeg)
    i=1
    while [ $i -le $dimtNeg ] ; do
	echo "-1 0 0 $ro_time" >> $txtfname
	ShiftNeg="x-"
	i=`echo "$i + 1" | bc`
    done
    
    #add a line for each positive phase image in X dimension (PhasePos)
    i=1
    while [ $i -le $dimtPos ] ; do
	echo "1 0 0 $ro_time" >> $txtfname
	ShiftPos="x"
	i=`echo "$i + 1" | bc`
    done
elif [[ $EpirefUnwarpDirection = "y" || $EpirefUnwarpDirection = "y-" || $EpirefUnwarpDirection = "-y" ]] ; then
    # Y direction phase encode
    dimy=$( fslval ${WD}/PhaseNeg dim2 )
    nPEsteps=$(($dimy - 1))
    #Total_readout=Echo_spacing*(#of_PE_steps-1)
    ro_time=`echo "scale=6; ${DwellTime} * ${nPEsteps}" | bc -l` #Compute Total_readout in secs with up to 6 decimal places
    rel "Total calculated readout time is $ro_time secs. Does this match your expectation?" c

    #add a line for each negative phase image in Y dimension (PhaseNeg)
    i=1
    while [ $i -le $dimtNeg ] ; do
	echo "0 -1 0 $ro_time" >> $txtfname
	ShiftNeg="y-"
	i=`echo "$i + 1" | bc`
    done

    #add a line for each positive phase image in Y dimension (PhasePos)
    i=1
    while [ $i -le $dimtPos ] ; do
	echo "0 1 0 $ro_time" >> $txtfname
	ShiftPos="y"
	i=`echo "$i + 1" | bc`
    done
fi

#Pad in Z by one slice if odd so that topup does not complain (slice consists of zeros that will be dilated by following step)
numslice=$( fslval ${WD}/BothPhases dim3 )
if [ ! $(($numslice % 2)) -eq "0" ] ; then
    rel "Padding Z by one slice so that topup does not complain. Extra slice removed later." c
    for Image in ${WD}/BothPhases ${WD}/Mask ; do
	rel "fslroi ${Image} ${WD}/slice.nii.gz 0 -1 0 -1 0 1 0 -1"
	rel "fslmaths ${WD}/slice -mul 0 ${WD}/slice"
	rel "fslmerge -z ${Image} ${Image} ${WD}/slice"
	rel "imrm ${WD}/slice"
    done
fi

rel "Extrapolate the existing values beyond the mask (adding 1 just to avoid smoothing inside the mask)" c
rel "fslmaths ${WD}/BothPhases -abs -add 1 -mas ${WD}/Mask -dilM -dilM -dilM -dilM -dilM ${WD}/BothPhases"

# RUN TOPUP
# Needs FSL (version 5.0.6 or higher)
rel "topup --imain=${WD}/BothPhases --datain=$txtfname --config=${TopupConfig} --out=${WD}/Coefficents --iout=${WD}/SE_Magnitudes \
    	   --fout=${WD}/SE_TopupField --dfout=${WD}/SE_WarpField --rbmout=${WD}/MotionMatrix --jacout=${WD}/SE_Jacobian -v"

#Remove Z slice padding if needed
if [ ! $(($numslice % 2)) -eq "0" ] ; then
  rel "Removing Z slice padding" c
  for Image in ${WD}/BothPhases ${WD}/Mask ${WD}/Coefficents_fieldcoef ${WD}/SE_Magnitudes ${WD}/SE_TopupField* ${WD}/SE_WarpField* ${WD}/SE_Jacobian* ; do
    rel "fslroi ${Image} ${Image} 0 -1 0 -1 0 ${numslice} 0 -1"
  done
fi


#register the epiref to the the spin-echo sequence of the same phase
rel "Registering the epiref image to the SE image with the same phase encoding direction" c
if [[ $EpirefUnwarpDirection = "x" || $EpirefUnwarpDirection = "y" ]] ; then
    # Direction of epiref phase encoding is positive. --epiref_pedir = x,y
    # select the first volume from PhasePos
    VolumeNumber=$(($dimtNeg + 1))
    vnum=$( zeropad $VolumeNumber 2 )
    setarget=PhasePos_gdc
    epirefPhase=Pos
elif [[ $EpirefUnwarpDirection = "x-" || $EpirefUnwarpDirection = "-x" || $EpirefUnwarpDirection = "y-" || $EpirefUnwarpDirection = "-y" ]] ; then
    # Direction of epiref phase encoding is negative. --epiref_pedir = -x,-y
    # select the first volume from PhaseNeg
    VolumeNumber=$((0 + 1))
    vnum=$( zeropad $VolumeNumber 2 )
    setarget=PhaseNeg_gdc
    epirefPhase=Neg
fi


#register epiref to SE image of the same phase
if [[ $have_ants -eq 1 && $have_c3d -eq 1 ]]; then
    rel "fslroi ${WD}/${setarget} ${WD}/${setarget}_vol1 0 1" #ants blows up on 4d targets
    rel "antsRegistrationSyN.sh -d 3 -f ${WD}/${setarget}_vol1${ext} -m ${WD}/epiref${ext} -t r -o ${WD}/epiref_to_${setarget}" #rigid transformation
    #convert to FSL-compatible transformation
    rel "c3d_affine_tool -ref ${WD}/${setarget}_vol1${ext} -src ${WD}/epiref${ext} -itk ${WD}/epiref_to_${setarget}0GenericAffine.mat -ras2fsl -o transforms/epiref_to_${setarget}.mat"
    rel "immv ${WD}/epiref_to_${setarget}Warped ${WD}/epiref_to_${setarget}"
    rel "mv ${WD}/epiref_to_${setarget}0GenericAffine.mat transforms/epiref_to_${setarget}.itk"
    rel "imrm ${WD}/epiref_to_${setarget}InverseWarped ${WD}/${setarget}_vol1" #not useful
else
    # further testing suggests that flirt coregistration is somewhat improved using skull-stripped images
    # register scout to SE input + combine motion and distortion correction
    rel "3dSkullStrip -overwrite -input ${WD}/epiref${ext} -prefix ${WD}/epiref_brain${ext} -touchup"
    rel "3dSkullStrip -overwrite -input ${WD}/${setarget}${ext} -prefix ${WD}/${setarget}_brain${ext} -touchup"    
    #rel "flirt -dof 6 -interp spline -in ${WD}/epiref -ref ${WD}/${setarget} -omat transforms/epiref_to_${setarget}.mat -out ${WD}/epiref_to_${setarget}"
    rel "flirt -dof 6 -interp spline -in ${WD}/epiref_brain -ref ${WD}/${setarget}_brain -omat transforms/epiref_to_${setarget}.mat -out ${WD}/epiref_to_${setarget}"    
fi

#compute warpfield in SE_Magnitude space (from TOPUP) and epiref space
rel "convert_xfm -omat transforms/epiref_to_sefmap.mat -concat ${WD}/MotionMatrix_${vnum}.mat transforms/epiref_to_${setarget}.mat"
rel "convert_xfm -omat transforms/sefmap_to_epiref.mat -inverse transforms/epiref_to_sefmap.mat" #compute SE -> EpiRef

#create epiref -> fmap image
qa_image "${WD}/${setarget}" "${WD}/epiref_to_${setarget}" epiref_to_sefmap.png "SE Magnitude overlaid with co-registered epiref (in TopupPreprocessingAll)"

#setup the relevant unwarping coefficients
#removing the epiref -> sefmap transform from HCP pipeline
#rel "convertwarp --relout --rel -r ${WD}/${setarget} --premat=transforms/epiref_to_sefmap.mat --warp1=${WD}/SE_WarpField_${vnum} --out=${WD}/SE_WarpField"
rel "imcp ${WD}/SE_WarpField_${vnum} ${WD}/SE_WarpField"

#epiref -> sefmap -> unwarp -> epiref transform (undistort images coregistered to epiref)
rel "convertwarp --relout --rel -r ${WD}/epiref --premat=transforms/epiref_to_sefmap.mat --warp1=${WD}/SE_WarpField_${vnum} --postmat=transforms/sefmap_to_epiref.mat --out=${WD}/ER_WarpField"

rel "imcp ${WD}/SE_Jacobian_${vnum} ${WD}/SE_Jacobian"

#Create a Jacobian in epiref space for general use in pipeline
rel "applywarp -i ${WD}/SE_Jacobian -r ${WD}/epiref --premat=transforms/sefmap_to_epiref.mat -o ${WD}/ER_Jacobian --interp=spline --rel"

# PhasePos (first vol) - warp and Jacobian modulate to get distortion corrected output
VolumeNumber=$(($dimtNeg + 1))
vnum=$( zeropad $VolumeNumber 2 )
rel "applywarp --rel --interp=spline -i ${WD}/PhasePos_gdc -r ${WD}/PhasePos_gdc --premat=${WD}/MotionMatrix_${vnum}.mat -w ${WD}/SE_WarpField_${vnum} -o ${WD}/PhasePos_gdc_dc"
rel "fslmaths ${WD}/PhasePos_gdc_dc -mul ${WD}/SE_Jacobian_${vnum} ${WD}/PhasePos_gdc_dc_jac"

# PhaseNeg (first vol) - warp and Jacobian modulate to get distortion corrected output
VolumeNumber=$((0 + 1))
vnum=$( zeropad $VolumeNumber 2 )
rel "applywarp --rel --interp=spline -i ${WD}/PhaseNeg_gdc -r ${WD}/PhaseNeg_gdc --premat=${WD}/MotionMatrix_${vnum}.mat -w ${WD}/SE_WarpField_${vnum} -o ${WD}/PhaseNeg_gdc_dc"
rel "fslmaths ${WD}/PhaseNeg_gdc_dc -mul ${WD}/SE_Jacobian_${vnum} ${WD}/PhaseNeg_gdc_dc_jac"

# Scout - warp and Jacobian modulate to get distortion corrected output
rel "applywarp --rel --interp=spline -i ${WD}/epiref -r ${WD}/${setarget} --premat=transforms/epiref_to_sefmap.mat -w ${WD}/SE_WarpField -o ${WD}/SE_UD_epiref"
rel "fslmaths ${WD}/SE_UD_epiref -mul ${WD}/SE_Jacobian.nii.gz ${WD}/SE_UD_epiref_jac"

rel "applywarp --rel --interp=spline -i ${WD}/epiref -r ${WD}/epiref -w ${WD}/ER_WarpField -o ${WD}/ER_UD_epiref"
rel "fslmaths ${WD}/ER_UD_epiref -mul ${WD}/ER_Jacobian ${WD}/ER_UD_epiref_jac"

# Calculate Equivalent Field Map
rel "Calculate equivalent fieldmap" c
rel "fslmaths ${WD}/SE_TopupField -mul 6.283185 ${WD}/SE_TopupField" #multiply field by 2*pi to convert Hz to rad/s
rel "fslmaths ${WD}/SE_Magnitudes.nii.gz -Tmean ${WD}/SE_Magnitude.nii.gz"
rel "bet ${WD}/SE_Magnitude ${WD}/SE_Magnitude_brain -f 0.35 -m" #Brain extract the magnitude image

# copy images to specified outputs (not used at the moment -- from original HCP script)
# if [ ! -z ${DistortionCorrectionWarpFieldOutput} ] ; then
#     imcp ${WD}/WarpField.nii.gz ${DistortionCorrectionWarpFieldOutput}.nii.gz
# fi

# if [ ! -z ${JacobianOutput} ] ; then
#     imcp ${WD}/Jacobian.nii.gz ${JacobianOutput}.nii.gz
# fi

# if [ ! -z ${DistortionCorrectionFieldOutput} ] ; then
#     imcp ${WD}/SE_TopupField.nii.gz ${DistortionCorrectionFieldOutput}.nii.gz
# fi

# if [ ! -z ${DistortionCorrectionMagnitudeOutput} ] ; then
#     imcp ${WD}/Magnitude.nii.gz ${DistortionCorrectionMagnitudeOutput}.nii.gz
# fi

# if [ ! -z ${DistortionCorrectionMagnitudeBrainOutput} ] ; then
#     imcp ${WD}/Magnitude_brain.nii.gz ${DistortionCorrectionMagnitudeBrainOutput}.nii.gz
# fi

rel "END: Topup Field Map Generation and Gradient Unwarping" c
date > .topup_complete

########################################## QA STUFF ########################################## 

command -v fsleyes >/dev/null 2>&1 && viewcmd=fsleyes || viewcmd=fslview

if [ -e $WD/qa.txt ] ; then rm -f $WD/qa.txt ; fi
echo "cd `pwd`" >> $WD/qa.txt
echo "# Inspect results of various corrections (negative phase)" >> $WD/qa.txt
echo "$viewcmd ${WD}/PhaseNeg ${WD}/PhaseNeg_gdc ${WD}/PhaseNeg_gdc_dc ${WD}/PhaseNeg_gdc_dc_jac" >> $WD/qa.txt
echo "# Inspect results of various corrections (positive phase)" >> $WD/qa.txt
echo "$viewcmd ${WD}/PhasePos ${WD}/PhasePos_gdc ${WD}/PhasePos_gdc_dc ${WD}/PhasePos_gdc_dc_jac" >> $WD/qa.txt
echo "# Check linear registration of Scout to SE EPI" >> $WD/qa.txt
echo "$viewcmd ${WD}/Phase${epirefPhase}_gdc ${WD}/epiref_to_Phase${epirefPhase}_gdc" >> $WD/qa.txt
echo "# Inspect results of various corrections to scout" >> $WD/qa.txt
echo "$viewcmd ${WD}/epiref ${WD}/ER_UD_epiref ${WD}/ER_UD_epiref_jac" >> $WD/qa.txt
echo "# Visual check of warpfield and Jacobian" >> $WD/qa.txt
echo "$viewcmd ${WD}/SE_WarpField ${WD}/SE_Jacobian" >> $WD/qa.txt

##############################################################################################
# vim: set tabstop=7:
