#!/bin/bash

function run_regfilt_in_r() {
   # we only need to run when ica_aroma fails to make nonaggr (prob b/c too many components?)
   [ -f "ica_aroma/denoised_func_data_nonaggr.nii.gz" ] && return 0

   rel "Missing denoised output. Assuming crash and using (very) slow R script version with 1 job." c
   rel "Rscript ${scriptDir}/fsl_regfilt.R \"${funcdir}/${preAroma}${ext}\" \"${funcdir}/ica_aroma/melodic.ica/melodic_mix\" \"${funcdir}/ica_aroma/classified_motion_ICs.txt\" 1"
}

# Run ICA-AROMA on data after spatial smoothing is complete
function ica_aroma {
    # Globals:
    #  * 'undo_smooth' from preproc_functions/check_requirements; same as 'no_smooth'
    #  * 'funcFile', 'tr' from  preproc_functions/parse_args
    #  * 'templateName', 'stddir'
    #  * 'prefix', postAroma
    # SideEffects:
    #  * update prefix, postAroma
    
    [ $ica_aroma -ne 1 ] && return 0
    

    # ica_aroma is the name of the bash function and possibly the binary to run
    # so we need the full path. Otherwise we run the bash function recursively in an endless loop
    #aroma_src=git+https://github.com/rtrhd/ICA-AROMA # Bristol University CRIC as 'aroma'
    #ica_aroma_bin=$(which aroma)
    aroma_src=git+https://github.com/WillForan/ICA-AROMA.git@maartenmennes-setup.py # original, packaged as ica_aroma
    ica_aroma_bin=$(which ica_aroma)


    [ -z "$ica_aroma_bin" ] &&
        rel "'ica_aroma' script or module missing! run 'python3 -m pip install $aroma_src' and ensure e.g. .local/bin is in PATH" c &&
        return 1
    
    preAroma="${postSmooth}" #should always fall after this step
    if [ $undo_smooth -eq 1 ]; then
        prefix=$(echo ${prefix} | perl -pe 's/^s//') #remove s from the beginning of the prefix since the preproc data are not smoothed
    fi
    prefix="a${prefix}"
    postAroma="${prefix}${funcFile}${smoothing_suffix}"

    # N.B. import this is after prefix is updated!
    [ -f ".ica_aroma_complete" ] && return 0

    #need absolute paths to ICA_AROMA.py script. (should eventually move this to the main script and make global)
    local funcdir=$(pwd) #define working directory for functional processing

    #"python \"${scriptDir}/ica_aroma/ICA_AROMA.py\" -overwrite -tr ${tr} -in \"${funcdir}/${preAroma}${ext}\" -out \"${funcdir}/ica_aroma\" -mc \"${funcdir}/motion.par\" -warp \"$warptoFSL\""
    # v4 py3+module branch via 'pip install git+https://github.com/rtrhd/ICA-AROMA' ==> 'aroma'
    # "aroma --tr ${tr} -i \"${funcdir}/${preAroma}${ext}\" -o \"${funcdir}/ica_aroma\" -p \"${funcdir}/motion.par\" -w \"$warptoFSL\" -a \"$idmat\""
    # 20200927 use repackaged original instead ==> ica_aroma
    local aroma_cmd="$ica_aroma_bin -overwrite -tr ${tr} -i \"${funcdir}/${preAroma}${ext}\" -o \"${funcdir}/ica_aroma\" -mc \"${funcdir}/motion.par\""

    
    #need to handle case when data are in native space. In conventional pipeline, data are already in MNI space
    #if data are in native space, then we need to have computed the warp for this to work
    
    if [[ $templateName =~ MNI_(2|2.3|3)mm ]]; then
        #if data are in Fonov MNI152, then we need to provide warp coefficients for Fonov -> MNI152. Otherwise, we end up needing to
        #warp to FSL152, run the script, then warp back to Fonov, which doubles down on interpolation artifacts. ICA_AROMA.py
        #does not apply any spatial transformations to the output dataset, it just uses it to check components against mask files distributed
        #with the package that are in FSL MNI152 2mm space.
       
        if [ ! -r "$stddir/mni_icbm152_nlin_asym_09c/fonov_mni152_to_fsl_mni152_warpcoef.nii.gz" ]; then
          echo "Cannot find fonov_mni152_to_fsl_mni152_warpcoef.nii.gz needed to warp Fonov MNI into FSL MNI for ICA-AROMA"
          return 1
        fi
    
        #handle no_warp situation
        local warptoFSL="$stddir/mni_icbm152_nlin_asym_09c/fonov_mni152_to_fsl_mni152_warpcoef.nii.gz"
        if [ $no_warp -eq 1 ]; then
          rel "convertwarp --ref=${stddir}/fsl_mni152/MNI152_T1_2mm --premat=$funcdir/transforms/func_to_struct.mat --warp1=$warpCoef \
                       --warp2=$stddir/mni_icbm152_nlin_asym_09c/fonov_mni152_to_fsl_mni152_warpcoef.nii.gz --relout --out=func_to_fsl_warpfield"
          warptoFSL="func_to_fsl_warpfield"
        fi
    
        idmat=$(dirname $0)/identity.mat
        [ ! -r $idmat ] && rel "missing warp identity matrix '$idmat'" c && exit 1
    
        rel "$aroma_cmd -w \"$warptoFSL\" -a \"$idmat\""
    
        [ $no_warp -eq 1 ] && rel "imrm func_to_fsl_warpfield"
    
    elif [[ $templateName = MNI_FSL_3mm || $templateName = MNI_FSL_2.3mm || $templateName = MNI_FSL_2mm ]]; then
        #if data are in FSL MNI152 already, then the warp should be complete at this point
        #in this case, ICA_AROMA.py does not need -affmat or -warp. Data will be resampled by the python script to 2mm to match template
    
        local warpsuffix=
        [ $no_warp -eq 1 ] && local warpsuffix="-w func_to_${templateName}_warpfield"
        rel "$aroma_cmd $warpsuffix"
    else
        rel "ICA-AROMA support only provided for FSL and Fonov MNI templates at the moment." c
        rel "Must use -template_brain <MNI_3mm|MNI_2.3mm|MNI_FSL_3mm|MNI_FSL_2.3mm|MNI_FSL_2mm>" c
        return 1
    fi

    ! test -r "${funcdir}/${preAroma}${ext}" && rel "ERROR: ica_aroma failed to make '$PWD/$_' " c && return 1
    
    #Handle case of fsl_regfilt crash when there are many (many) components. Put this above undo smooth since that assumes the outputs exist
    run_regfilt_in_r
    
    #rename AROMA output to dummy, then regress melodic mixing matrix onto unsmoothed data
    if [ $undo_smooth -eq 1 ]; then
        #only apply AROMA components to unsmoothed data if any of them was flagged as noise. Otherwise, simply update symbolic links to point to unsmoothed data
        rel "immv ica_aroma/denoised_func_data_nonaggr ica_aroma/denoised_func_data_nonaggr_withsmooth"
    
        if [ -f "${funcdir}/ica_aroma/classified_motion_ICs.txt" ]; then
            rel "fsl_regfilt -i ${preSmooth} -o ica_aroma/denoised_func_data_nonaggr -d ${funcdir}/ica_aroma/melodic.ica/melodic_mix -f $( cat ${funcdir}/ica_aroma/classified_motion_ICs.txt )"
       
           #It's likely that if fsl_regfilt crashes on the smoothed data, it will crash again on the unsmoothed. Trap and handle this possibility in R
           run_regfilt_in_r
        else
            rel "ln -sfn ../${preSmooth}${ext} ica_aroma/denoised_func_data_nonaggr${ext}" #nothing to denoise. just carry forward unsmoothed data as AROMA 'output'
        fi
    fi
    
    #create symbolic link to the aroma output
    rel "ln -sfn ica_aroma/denoised_func_data_nonaggr${ext} ${postAroma}${ext}"
    rel "date > .ica_aroma_complete"
    
    
}
# vim: set tabstop=7:
