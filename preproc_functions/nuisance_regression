#!/bin/bash

function nuisance_regression {
    #handle nuisance regression and/or bandpass filtering

    [[ "$nuisance_regression" -eq 0 && "$bandpass_filter" -eq 0 ]] && return 0 #neither step

    preNRBP="${prefix}${funcNifti}"
    
    local todo=
    if [[ "$nuisance_regression" -eq 1 && "$bandpass_filter" -eq 1 ]]; then todo="br" #bandpass and regression
    elif [ "$nuisance_regression" -eq 1 ]; then todo="r" #regression only
    else todo="b" #bandpass alone
    fi

    postNRBP="${todo}${prefix}${funcNifti}"   

    #check whether requisite steps are complete
    [[ -f .nuisance_regression_complete && todo=r ]] && return 0
    [[ -f .bandpass_filter_complete && todo=b ]] && return 0
    [[ -f .nuisance_regression_complete && -f .bandpass_filter_complete && todo=br ]] && return 0

    #todo: handle bp only

    declare -a nuisancecols #nuisance regressors to be concatenated

    #parse regressors of interest
    OLDIFS="${IFS}"
    IFS=',' read -ra reg <<< "$nuisance_regressors"
    for r in "${reg[@]}"; do
	if [[ "$r" =~ ^(6motion|rx|ry|rz|tx|ty|tz)$ && ! -f ".motion_demean" ]]; then 
	    #compute de-meaned motion parameters for nuisance regression
	    1d_tool.py -overwrite -infile motion.par -set_nruns 1 \
		-demean -write .motion_demean	    
	fi

	if [[ "$r" =~ ^(d6motion|drx|dry|drz|dtx|dty|dtz)$ && ! -f ".motion_deriv" ]]; then 
	    #compute motion parameter derivatives for nuisance regression
	    1d_tool.py -overwrite -infile motion.par -set_nruns 1 \
		-derivative -demean -write .motion_deriv
	fi

	if [[ "$r" =~ ^(csf|dcsf)$ && ! -f ".csf_ts" ]]; then
	    #fast segmentation should have been run during preprocessMprage
	    #use seg_0 for csf
	    #re-run FAST here if needed
	    [ $( imtest "${mprageBet_base}_fast_seg_0" ) -eq 0 ] && rel "fast -o \"${mprageBet_base}_fast\" \"${mprageBet_base}\""

	    #erode CSF mask twice to avoid any partial volume effects
	    rel "fslmaths ${mprageBet_base}_fast_seg_0 -eroF -eroF .csf_ero2x -odt char"
	    
	    #check that at least 250 voxels are present in mask to get a reasonable sampling distribution of CSF timeseries
	    local nvox=$( 3dBrickStat -non-zero -count .csf_ero2x )

	    if [ $nvox -lt 250 ]; then
		#go back to a 1x erosion
		rel "fslmaths ${mprageBet_base}_fast_seg_0 -eroF .csf_ero1x -odt char"

		#obtain timeseries from functional warped to structural space (during coregistration)
		rel "3dmaskave -mask .csf_ero1x -q func_to_struct > .csf_ts"
	    else
		rel "3dmaskave -mask .csf_ero2x -q func_to_struct > .csf_ts"
	    fi

	    rel "1d_tool.py -overwrite -infile .csf_ts -derivative -write .csf_ts_deriv"
	fi

	if [[ "$r" =~ ^(wm|dwm)$ && ! -f ".wm_ts" ]]; then
	    #fast segmentation should have been run during preprocessMprage
	    #use seg_2 for wm
	    #re-run FAST here if needed
	    [ $( imtest "${mprageBet_base}_fast_seg_2" ) -eq 0 ] && rel "fast -o \"${mprageBet_base}_fast\" \"${mprageBet_base}\""

	    #erode WM mask twice to avoid any partial volume effects
	    rel "fslmaths ${mprageBet_base}_fast_seg_2 -eroF -eroF .wm_ero2x -odt char"
	    
	    #check that at least 500 voxels are present in mask to get a reasonable sampling distribution of WM timeseries
	    local nvox=$( 3dBrickStat -non-zero -count .wm_ero2x )

	    if [ $nvox -lt 500 ]; then
		#go back to a 1x erosion
		rel "fslmaths ${mprageBet_base}_fast_seg_0 -eroF .wm_ero1x -odt char"

		#obtain timeseries from functional warped to structural space (during coregistration)
		rel "3dmaskave -mask .csf_ero1x -q func_to_struct > .wm_ts"
	    else
		rel "3dmaskave -mask .csf_ero2x -q func_to_struct > .wm_ts"
	    fi

	    rel "1d_tool.py -overwrite -infile .wm_ts -derivative -write .wm_ts_deriv"
	fi

	#global signal
	if [[ "$r" =~ ^(gs|dgs)$ && ! -f ".gs_ts" ]]; then
	    #erode the tight skull-stripped brain mask from the structural scan to identify brain voxels
	    rel "fslmaths ${mprageBet_base} -bin -eroF -eroF .brainmask_ero2x -odt char" #eroding the binarized mprage_bet

	    rel "3dmaskave -mask .brainmask_ero2x -q func_to_struct > .gs_ts"
	    rel "1d_tool.py -overwrite -infile .gs_ts -derivative -write .gs_ts_deriv"
	fi

	case "$r" in 
	    6motion)
		nuisancecols+=(".motion_demean[0]")
		nuisancecols+=(".motion_demean[1]")
		nuisancecols+=(".motion_demean[2]")
		nuisancecols+=(".motion_demean[3]")
		nuisancecols+=(".motion_demean[4]")
		nuisancecols+=(".motion_demean[5]")
		;;
	    rx)
		nuisancecols+=(".motion_demean[0]");;
	    ry)
		nuisancecols+=(".motion_demean[1]");;
	    rz)
		nuisancecols+=(".motion_demean[2]");;
	    tx)
		nuisancecols+=(".motion_demean[3]");;
	    ty)
		nuisancecols+=(".motion_demean[4]");;
	    tz)
		nuisancecols+=(".motion_demean[5]");;
	    d6motion)
		nuisancecols+=(".motion_deriv[0]")
		nuisancecols+=(".motion_deriv[1]")
		nuisancecols+=(".motion_deriv[2]")
		nuisancecols+=(".motion_deriv[3]")
		nuisancecols+=(".motion_deriv[4]")
		nuisancecols+=(".motion_deriv[5]")
		;;
	    drx)
		nuisancecols+=(".motion_deriv[0]");;
	    dry)
		nuisancecols+=(".motion_deriv[1]");;
	    drz)
		nuisancecols+=(".motion_deriv[2]");;
	    dtx)
		nuisancecols+=(".motion_deriv[3]");;
	    dty)
		nuisancecols+=(".motion_deriv[4]");;
	    dtz)
		nuisancecols+=(".motion_deriv[5]");;
	    wm)
		nuisancecols+=(".wm_ts");;
	    dwm)
		nuisancecols+=(".wm_ts_deriv");;
	    csf)
		nuisancecols+=(".csf_ts");;
	    dcsf)
		nuisancecols+=(".csf_ts_deriv");;
	    gs)
		nuisancecols+=(".gs_ts");;
	    dgs)
		nuisancecols+=(".gs_ts_deriv");;	    
	esac

    done
    IFS="${OLDIFS}"

    nuisance_concat=$(printf "%s\n" "${ids[@]}" | sort -u) #only keep unique columns
    rel "1dcat -overwrite $nuisance_concat > .nuisance_regressors"
    
    if [ $bandpass_filter -eq 1 ]; then
        rel "3dBandpass -input \"$preNRBP\" -mask \"${subjMask}\" \
		-prefix \"$postNRBP\" -ort .nuisance_regressors $bpLow $bpHigh"
    else
        rel "3dDetrend -verb -polort 2 -vector .nuisance_regressors \
		-prefix \"$postNRBP\" \"$preNRBP\""
	
	#need to mask detrend by brain mask as with 3dBandpass
	rel "fslmaths \"$postNRBP\" -mas \"$subjMask\" \"postNRBP\""
    fi
    
    rel "date > .nuisance_regression_complete"
    
    #explicit return code needed to avoid implicit status of prior command
    return 0

}
