#!/bin/bash

function compute_motion_censor {
    #parse -censor_motion syntax

    [ "$nuisance_regression" -eq 0 ] && return 0

    [ -f .nuisance_regression_complete ] && return 0

    #parse regressors of interest
    OLDIFS="${IFS}"
    IFS=',' read -ra reg <<< "$nuisance_regressors"
    for r in "${reg[@]}"; do

	if [[ "$r" =~ ^(6motion|d6motion|rx|ry|rz|tx|ty|tz|)$ && ! -f "n ]]; then 
echo "true"; fi

drx|dry|drz|dtx|dty|dtz

	case "$r" in 
	    6motion)
 
		metric="--${metric}" #add double hyphen for compatibility with fsl_motion_outliers
		[ -n "$thresh" ] && thresh="--thresh=${thresh}" #format for fsl_motion_outliers
		rel "fsl_motion_outliers -i \"$funcFile\" -o \"$matname\" $metric $thresh $imgname $metname";;

	esac
    done
    IFS="${OLDIFS}"


        if [[ $spec == *=* ]]; then
            #has equals sign
            metric=${spec/=*/} #before the equals
            thresh=${spec/*=/} #after the equals
            outbase="${metric}_${thresh}"


####
##STEP 4: Obtain estimates of WM and Vent signal for nuisance regression
#compute WM, GM, and Ventricle signal from FreeSurfer aseg file

#NB: An important issue here is that the Vent and WM signals will have full frequency spectra because these have not been
#bandpassed yet. Thus, it's possible the Power pipeline also introduces high-frequency noise due to spectral incomparability between
#the fMRI signal and the WM and Vent regressors.

#This is solved here by computing the WM and Vent signals from nswktm data in full frequencies, but then using 3dBandpass,
#which will bandpass WM and Vent prior to regression.

if [ ! -f ${t2dir}/nuisance_regressors/${sid}_nuisance_set_100voxelmean.1D ]; then
    
    cd ${t2dir}

    [ ! -d nuisance_regressors ] && mkdir nuisance_regressors

    #not sure why de-meaning is included here (keep for now)
    1d_tool.py -overwrite -infile ${t2dir}/m_${t2base}.par -set_nruns 1 \
        -demean -write ${t2dir}/nuisance_regressors/${sid}_motion_demean.1D
     
    #compute motion parameter derivatives (for use in regression)
    1d_tool.py -overwrite -infile ${t2dir}/nuisance_regressors/${sid}_motion_demean.1D -set_nruns 1 \
           -derivative -demean -write ${t2dir}/nuisance_regressors/${sid}_motion_deriv.1D

    #compute nuisance set for all scalings
    for t in 100voxelmean 1000globmedian 1000globmean 1000globmode; do
	#First, we need to upsample the data to 1mm voxels to compute WM and Vent signals, as these masks are at 1mm
	if [ ! -f ${t2dir}/nswktm_${t2base}_6_${t}_1mm.nii.gz ]; then
	        flirt -in ${t2dir}/nswktm_${t2base}_6_${t}.nii.gz \
		    -ref ${t1dir}/${sid}_t1_1mm_mni152.nii.gz \
		    -applyxfm -init ${FSLDIR}/etc/flirtsch/ident.mat \
		    -out ${t2dir}/nswktm_${t2base}_6_${t}_1mm -paddingsize 0.0 -interp nearestneighbour

		#FSL is a bad little boy and strips away the TR. Bring it back!
		    3drefit -TR $TR nswktm_${t2base}_6_${t}_1mm.nii.gz
		    fi

        #average voxels within preprocessed functional data
	3dmaskave -mask ${t1dir}/${sid}_WM_mask_mni_erod+tlrc -q ${t2dir}/nswktm_${t2base}_6_${t}_1mm.nii.gz > ${t2dir}/nuisance_regressors/${sid}_WM_${t}.1D
	3dmaskave -mask ${t1dir}/${sid}_Vent_mask_mni_erod+tlrc -q ${t2dir}/nswktm_${t2base}_6_${t}_1mm.nii.gz > ${t2dir}/nuisance_regressors/${sid}_Vent_${t}.1D
	3dmaskave -mask 'SELF' -q ${t2dir}/nswktm_${t2base}_6_${t}_1mm.nii.gz > ${t2dir}/nuisance_regressors/${sid}_Global_${t}.1D

        #compute derivatives of wm, vent, global
	1d_tool.py -overwrite -infile ${t2dir}/nuisance_regressors/${sid}_WM_${t}.1D -derivative -write ${t2dir}/nuisance_regressors/${sid}_WM_${t}_deriv.1D
	1d_tool.py -overwrite -infile ${t2dir}/nuisance_regressors/${sid}_Vent_${t}.1D -derivative -write ${t2dir}/nuisance_regressors/${sid}_Vent_${t}_deriv.1D
	1d_tool.py -overwrite -infile ${t2dir}/nuisance_regressors/${sid}_Global_${t}.1D -derivative -write ${t2dir}/nuisance_regressors/${sid}_Global_${t}_deriv.1D

        #compute set of nuisance regressors per normalization
	1dcat -overwrite ${t2dir}/nuisance_regressors/${sid}_WM_${t}.1D \
	        ${t2dir}/nuisance_regressors/${sid}_Vent_${t}.1D \
	        ${t2dir}/nuisance_regressors/${sid}_Global_${t}.1D \
	        ${t2dir}/nuisance_regressors/${sid}_WM_${t}_deriv.1D \
	        ${t2dir}/nuisance_regressors/${sid}_Vent_${t}_deriv.1D \
	        ${t2dir}/nuisance_regressors/${sid}_Global_${t}_deriv.1D \
	        ${t2dir}/nuisance_regressors/${sid}_motion_demean.1D \
	        ${t2dir}/nuisance_regressors/${sid}_motion_deriv.1D > ${t2dir}/nuisance_regressors/${sid}_nuisance_set_${t}.1D

	1dcat -overwrite ${t2dir}/nuisance_regressors/${sid}_WM_${t}.1D \
	        ${t2dir}/nuisance_regressors/${sid}_Vent_${t}.1D \
	        ${t2dir}/nuisance_regressors/${sid}_WM_${t}_deriv.1D \
	        ${t2dir}/nuisance_regressors/${sid}_Vent_${t}_deriv.1D \
	        ${t2dir}/nuisance_regressors/${sid}_motion_demean.1D \
	        ${t2dir}/nuisance_regressors/${sid}_motion_deriv.1D > ${t2dir}/nuisance_regressors/${sid}_nuisance_set_noglobal_${t}.1D
    done
